plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java' // java plugin is needed for the shadow plugin to work
}

//jarJar.enable()

version = "${minecraft_version}-${mod_version}"
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true

    // When true, this property will have all IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            // These arguments allow for optional authentication with Mojang servers.
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
            // By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
                // You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
    maven { url 'https://jitpack.io' }


    maven { url 'https://repo.minebench.de/' }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Original mod "common" dependencies, followed by the adapted dependency for this project
    // api 'commons-io:commons-io:2.12.0'
    minecraftLibrary ("commons-io:commons-io:2.12.0")
    /*jarJar(group: 'commons-io', name: 'commons-io', version: '[2.12.0,)') {
        transitive(false)
    }*/
    // api 'org.apache.commons:commons-text:1.10.0'
    minecraftLibrary ("org.apache.commons:commons-text:1.10.0"){
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    /*jarJar(group: 'org.apache.commons', name: 'commons-text', version: '[1.10.0,)') {
        transitive(false)
    }*/
    // api 'de.themoep:minedown-adventure:1.7.2-SNAPSHOT'
    minecraftLibrary ("de.themoep:minedown-adventure:1.7.2-SNAPSHOT")
    /*jarJar(group: 'de.themoep', name: 'minedown-adventure', version: '[1.7.2-SNAPSHOT,)') {
        transitive(false)
    }*/
    // api 'com.google.code.gson:gson:2.10.1'
    minecraftLibrary ("com.google.code.gson:gson:2.10.1")
    /*jarJar(group: 'com.google.code.gson', name: 'gson', version: '[2.10.1,)') {
        transitive(false)
    }*/
    // api 'net.william278:Annotaml:2.0.1'
    minecraftLibrary ("net.william278:Annotaml:2.0.1")
    /*jarJar(group: 'net.william278', name: 'Annotaml', version: '[2.0.1,)') {
        transitive(false)
    }*/
    // api 'net.william278:PagineDown:1.1'
    minecraftLibrary ("net.william278:PagineDown:1.1")
    /*jarJar(group: 'net.william278', name: 'PagineDown', version: '[1.1,)') {
        transitive(false)
    }*/
    // api 'net.william278:DesertWell:2.0.4'
    minecraftLibrary ("net.william278:DesertWell:2.0.4")
    /*jarJar(group: 'net.william278', name: 'DesertWell', version: '[2.0.4,)') {
        transitive(false)
    }*/
    // api 'dev.dejvokep:boosted-yaml:1.3.1'
    minecraftLibrary("dev.dejvokep:boosted-yaml:1.3.1"){
        exclude group: 'org.intellij.lang.annotations'
        exclude group: 'org.jetbrains.annotations'
    }
    /*jarJar(group: 'dev.dejvokep', name: 'boosted-yaml', version: '[1.3.1,)') {
        transitive(false)
    }*/
    // api 'net.kyori:adventure-api:4.13.1'
    minecraftLibrary ("net.kyori:adventure-api:4.13.1"){
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    /*
    api('com.zaxxer:HikariCP:5.0.1') {
        exclude module: 'slf4j-api'
    }
     */
    minecraftLibrary ("com.zaxxer:HikariCP:5.0.1"){
        exclude module: 'slf4j-api'
    }
    /*jarJar(group: 'com.zaxxer', name: 'HikariCP', version: '[5.0.1,)') {
        exclude module: 'slf4j-api'
        transitive(false)
    }*/

    // compileOnly 'redis.clients:jedis:' + jedis_version
    // compileOnly 'org.xerial:sqlite-jdbc:' + sqlite_driver_version
    // compileOnly 'com.mysql:mysql-connector-j:' + mysql_driver_version

    // compileOnly 'org.jetbrains:annotations:24.0.1'
    //compileOnly ("org.jetbrains:annotations:24.0.1")
    // compileOnly 'com.google.guava:guava:31.1-jre'
    compileOnly ("com.google.guava:guava:31.1-jre")
    // compileOnly 'com.github.plan-player-analytics:Plan:5.5.1923'
    compileOnly ("com.github.plan-player-analytics:Plan:5.5.1923")
    // compileOnly 'com.github.BlueMap-Minecraft:BlueMapAPI:2.5.0'
    compileOnly fg.deobf("curse.maven:bluemap-406463:4474500")
    // compileOnly 'us.dynmap:DynmapCoreAPI:3.4'
    compileOnly fg.deobf("curse.maven:dynmapforge-59433:4632225")
    // compileOnly 'maven.modrinth:pl3xmap:1.19.4-433'
    compileOnly fg.deobf("maven.modrinth:pl3xmap:1.19.4-SNAPSHOT")

    // Original mod "fabric" dependencies, followed by the adapted dependency for this project
    //modImplementation include('net.kyori:adventure-platform-fabric:5.8.0')
    implementation fg.deobf("com.github.Thelnfamous1:adventure-platform-forge:1.19.2-SNAPSHOT")
    //modImplementation include('me.lucko:fabric-permissions-api:0.2-SNAPSHOT')
    implementation fg.deobf("curse.maven:luckperms-431733:3995676")
    implementation fg.deobf("com.github.Thelnfamous1:PermissionsAPI:1.19.2-SNAPSHOT")

    //implementation include("redis.clients:jedis:$jedis_version")
    minecraftLibrary ("redis.clients:jedis:${jedis_version}")
    /*jarJar(group: 'redis.clients', name: 'jedis', version: "[${jedis_version},)") {
        transitive(false)
    }*/
    //implementation include("org.apache.commons:commons-pool2:$commons_pool_version")
    minecraftLibrary ("org.apache.commons:commons-pool2:${commons_pool_version}")
    /*jarJar(group: 'org.apache.commons', name: 'commons-pool2', version: "[${commons_pool_version},)") {
        transitive(false)
    }*/
    //implementation include("com.mysql:mysql-connector-j:$mysql_driver_version")
    minecraftLibrary ("com.mysql:mysql-connector-j:${mysql_driver_version}")
    /*jarJar(group: 'com.mysql', name: 'mysql-connector-j', version: "[${mysql_driver_version},)") {
        transitive(false)
    }*/
    //implementation include("org.mariadb.jdbc:mariadb-java-client:$mariadb_driver_version")
    minecraftLibrary ("org.mariadb.jdbc:mariadb-java-client:${mariadb_driver_version}")
    /*jarJar(group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: "[${mariadb_driver_version},)") {
        transitive(false)
    }*/
    minecraftLibrary ("com.github.waffle:waffle-jna:${waffle_jna_version}") // need this too for some reason
    /*jarJar(group: 'com.github.waffle', name: 'waffle-jna', version: "[${waffle_jna_version},)") {
        transitive(false)
    }*/
    //implementation include("org.xerial:sqlite-jdbc:$sqlite_driver_version")
    minecraftLibrary ("org.xerial:sqlite-jdbc:${sqlite_driver_version}")
    /*jarJar(group: 'org.xerial', name: 'sqlite-jdbc', version: "[${sqlite_driver_version},)") {
        transitive(false)
    }*/
    //implementation include("com.h2database:h2:$h2_driver_version")
    minecraftLibrary ("com.h2database:h2:${h2_driver_version}")
    /*jarJar(group: 'com.h2database', name: 'h2', version: "[${h2_driver_version},)") {
        transitive(false)
    }*/
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1', // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}


tasks.configureEach {
    if (name == "reobfJar") {
        mustRunAfter(tasks.shadowJar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


configurations {
    shade
}


shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]

    exclude('net.fabricmc:.*')
    exclude('net.kyori:.*')
    exclude '/mappings/*'

    relocate 'org.apache.commons.io', 'net.william278.huskhomes.libraries.commons.io'
    relocate 'org.apache.commons.text', 'net.william278.huskhomes.libraries.commons.text'
    //relocate 'org.apache.commons.lang3', 'net.william278.huskhomes.libraries.commons.lang3'
    relocate 'de.themoep', 'net.william278.huskhomes.libraries'
    //relocate 'org.jetbrains', 'net.william278.huskhomes.libraries'
    //relocate 'org.intellij', 'net.william278.huskhomes.libraries'
    relocate 'com.zaxxer', 'net.william278.huskhomes.libraries'
    relocate 'net.william278.annotaml', 'net.william278.huskhomes.libraries.annotaml'
    relocate 'net.william278.paginedown', 'net.william278.huskhomes.libraries.paginedown'
    relocate 'net.william278.desertwell', 'net.william278.huskhomes.libraries.desertwell'
    relocate 'dev.dejvokep.boostedyaml', 'net.william278.huskhomes.libraries.boostedyaml'
    relocate 'org.yaml.snakeyaml', 'net.william278.huskhomes.libraries.snakeyaml'
    relocate 'com.google.gson', 'net.william278.huskhomes.libraries.gson'
}

reobf {
    shadowJar{ }
}

//jar.finalizedBy('reobfJar')
// this replaces jar.finalizedBy('reobfJar') in the standard forge mod buildscript

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
